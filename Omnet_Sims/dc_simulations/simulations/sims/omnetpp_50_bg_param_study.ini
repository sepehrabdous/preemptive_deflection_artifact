[Config DCTCP_DIST_PD_DALPHA]

############ REQUIRES POTENTIAL CHANGE #######################
network = LeafSpine

**.ipv4.ip.timeToLive = ${ttl = 250}
**.tcp.close_instead_of_timewait = ${closeInsteadOfWait = true}
**.tcp.FRs_disabled = ${FRsDisabled = false}
**.useECMP = ${usingECMP = false}
**.use_power_of_n_lb = ${usingPowerOfNLB = true}
**.agg[*].random_power_factor = ${aggRandomPowerFactor = 2}
**.spine[*].random_power_factor = ${spineRandomPowerFactor = $aggRandomPowerFactor}
**.tcp.tcpAlgorithmClass = "DCTcp"
**.tcp.ecnWillingness = ${ecnWill = true}

repeat = 1
sim-time-limit = ${simTimeLimit = 1.2}s





###############################V2 setting###################
**.ipv4.ip.should_use_v2_marking = ${shouldUseV2Marking = true}
**.ipv4.ip.marking_type = ${markingType = "SRPT"}
#**.ipv4.ip.packet_hash_table_size = 3
#**.ipv4.ip.flow_hash_table_size = 1
**.ipv4.ip.delta = ${markingTimer = 0.00036}s

**.ipv4.ip.has_ordering_layer = ${hasOrderingLayer = true}
**.ipv4.ip.omega = ${orderingTimer = 0.00036}s
###############################V2 setting###################


**.num_spines = ${numSpines = 4}
**.num_aggs = ${numAggs = 8}
**.num_servers = ${numServers = 40}
**.num_bursty_apps = ${numBurstyApps = 1}
**.server[*].app[1..].num_requests_per_burst = ${numReqPerBurst = 100}
**.num_mice_background_flow_apps_in_each_server = ${numMiceBackgroundFlowAppsInEachServer = 1}
**.num_elephant_background_flow_apps_in_each_server = ${numElephantBackgroundFlowAppsInEachServer = 0}

**.server[*].app[1..].startTime = 0s
**.server[*].app[1..].replyLength = ${incastFlowSize = 40000}B
**.server[*].app[1..].requestLength = 250B
**.server[*].app[1..].application_category = ${serverApplicationCategory = index() < 1 + $numMiceBackgroundFlowAppsInEachServer ? "cache" : "web"}
**.server[*].app[1..].background_inter_arrival_time_multiplier = ${bgInterArrivalMultiplier = 0.2428}
**.server[*].app[1..].background_flow_size_multiplier = ${bgFlowSizeMultiplier = 1}
**.server[*].app[1..].bursty_inter_arrival_time_multiplier = ${burstyInterArrivalMultiplier = 0.125,  0.0243, 0.0135}
**.server[*].app[1..].bursty_flow_size_multiplier = ${burstyFlowSizeMultiplier = 1}
**.server[*].app[1..].numRequestsToSend = 1
**.server[*].app[1..].distibutions_base_root = "./"


**.agg[*].eth[*].mac.queue.typename = ${aggQueueType = "V2PIFOCanaryQueue"}
**.agg[*].eth[*].mac.queue.dataCapacity = ${aggQueueSizePacketBytes = 300000}B
#**.agg[*].use_v2_pifo = ${aggUseV2Pifo = true}
#**.eth[*].mac.queue.dataCapacity = ${aggBufferSizePacketBytes = $aggPerQueueSizePacketBytes*$aggQueueNum}B
**.agg[*].use_vertigo_prio_queue = ${aggUseVertigoPrioQueue = true}
**.agg[*].v2pifo_queue_type = ${aggV2pifoQueueType = "canary"}
**.agg[*].eth[*].mac.queue.dctcp_thresh = ${aggQueueSizeDCTCPThresh = 65}
**.agg[*].eth[*].mac.queue.algorithm_type = ${aggAlgorithmType = "DETERMINISTIC"}
**.agg[*].eth[*].mac.queue.relative_priority_calculation_type = ${aggRelativePriorityCalculationType = "DISTRIBUTION"}
**.agg[*].eth[*].mac.queue.relative_priority_distribution_type = ${aggRelativePriorityDistributionType = "EXPONENTIAL"}
**.agg[*].eth[*].mac.queue.minth = ${aggMinTh = 75000}
**.agg[*].eth[*].mac.queue.k = ${aggK = 0, 0.1, 0.2, 0.3, 0.5, 0.7, 0.9, 0.99, 1}
**.agg[*].eth[*].mac.queue.quantile_wind_size = ${aggQuantileWindSize = 20}
**.agg[*].eth[*].mac.queue.aifo_sample_count = ${aggAIFOSampleCount = 20}

**.spine[*].eth[*].mac.queue.typename = ${spineQueueType = $aggQueueType}
**.spine[*].eth[*].mac.queue.dataCapacity = ${spineQueueSizePacketBytes = $aggQueueSizePacketBytes}B
#**.spine[*].use_v2_pifo = ${spineUseV2Pifo = $aggUseV2Pifo}
#**.spine[*].eth[*].mac.queue.dataCapacity = ${spineBufferSizePacketBytes = $aggBufferSizePacketBytes}B
**.spine[*].use_vertigo_prio_queue = ${spineUseVertigoPrioQueue = $aggUseVertigoPrioQueue}
**.spine[*].v2pifo_queue_type = ${spineV2pifoQueueType = $aggV2pifoQueueType}
**.spine[*].eth[*].mac.queue.dctcp_thresh = ${spineQueueSizeDCTCPThresh = $aggQueueSizeDCTCPThresh}
**.spine[*].eth[*].mac.queue.algorithm_type = ${spineAlgorithmType = $aggAlgorithmType}
**.spine[*].eth[*].mac.queue.relative_priority_calculation_type = ${spineRelativePriorityCalculationType = $aggRelativePriorityCalculationType}
**.spine[*].eth[*].mac.queue.relative_priority_distribution_type = ${spineRelativePriorityDistributionType = $aggRelativePriorityDistributionType}
**.spine[*].eth[*].mac.queue.minth = ${spineMinTh = $aggMinTh}
**.spine[*].eth[*].mac.queue.k = ${spineK = $aggK}
**.spine[*].eth[*].mac.queue.quantile_wind_size = ${spineQuantileWindSize = $aggQuantileWindSize}
**.spine[*].eth[*].mac.queue.aifo_sample_count = ${spineAIFOSampleCount = $aggAIFOSampleCount}


**.agg[*].use_memory = ${aggUseMemory = true}
**.agg[*].random_power_memory_size = ${aggPowerMemSize = 1}
**.agg[*].random_power_bounce_memory_size = ${aggPowerBounceMemSize = 1}
**.spine[*].use_memory = ${spineUseMemory = $aggUseMemory}
**.spine[*].random_power_memory_size = ${spinePowerMemSize = $aggPowerMemSize}
**.spine[*].random_power_bounce_memory_size = ${spinePowerBounceMemSize = $aggPowerBounceMemSize}


**.agg[*].eth[*].mac.typename = ${aggMacTypeName = "AugmentedEtherMac"}
**.spine[*].eth[*].mac.typename = ${spineMacTypeName = $aggMacTypeName}
**.agg[*].relayUnit.typename = ${aggRelayTypeName = "BouncingIeee8021dRelay"}
**.spine[*].relayUnit.typename = ${spineRelayTypeName = $aggRelayTypeName}

**.server[*].app[1..].use_jitter = ${server0UseJitter = false}

**.agg[*].bounce_randomly = ${aggBounceRandomly = false}
**.spine[*].bounce_randomly = ${spineBounceRandomly = $aggBounceRandomly}

**.agg[*].bounce_on_same_path = ${aggBounceOnSamePath = false}
**.spine[*].bounce_on_same_path = ${spineBounceOnSamePath = $aggBounceOnSamePath}
**.server[*].forwarding = ${serverForwarding = $aggBounceOnSamePath}

**.agg[*].bounce_randomly_v2 = ${aggBounceRandomlyPowerOfN = true}
**.spine[*].bounce_randomly_v2 = ${spineBounceRandomlyPowerOfN = $aggBounceRandomlyPowerOfN}
**.agg[*].random_power_bounce_factor = ${aggBounceRandomlyPowerFactor = 2}
**.spine[*].random_power_bounce_factor = ${spineBounceRandomlyPowerFactor = $aggBounceRandomlyPowerFactor}

**.agg[*].denominator_for_retrasnmissions = ${aggDenomRet = 2}
**.spine[*].denominator_for_retrasnmissions = ${spineDenomRet = $aggDenomRet}

**.arp.typename = "GlobalArp"
**.agg[*].learn_mac_addresses = false
**.spine[*].learn_mac_addresses = false
**.agg[*].macTable.addressTableFile ="./MAC_Table_Data/agg[" + string(parentIndex()) + "].txt"
**.spine[*].macTable.addressTableFile ="./MAC_Table_Data/spine[" + string(parentIndex()) + "].txt"

cmdenv-output-file = results/${numSpines}_spines_${numAggs}_aggs_${numServers}_servers_${numReqPerBurst}_reqPerBurst_${bgInterArrivalMultiplier}_bgintermult_${burstyInterArrivalMultiplier}_burstyintermult_${repetition}_rep_${incastFlowSize}_incastfsize_${aggK}_k_${aggQuantileWindSize}_windsize_${aggAIFOSampleCount}_samprate.out
output-scalar-file = results/${numSpines}_spines_${numAggs}_aggs_${numServers}_servers_${numReqPerBurst}_reqPerBurst_${bgInterArrivalMultiplier}_bgintermult_${burstyInterArrivalMultiplier}_burstyintermult_${repetition}_rep_${incastFlowSize}_incastfsize_${aggK}_k_${aggQuantileWindSize}_windsize_${aggAIFOSampleCount}_samprate.sca
output-vector-file = results/${numSpines}_spines_${numAggs}_aggs_${numServers}_servers_${numReqPerBurst}_reqPerBurst_${bgInterArrivalMultiplier}_bgintermult_${burstyInterArrivalMultiplier}_burstyintermult_${repetition}_rep_${incastFlowSize}_incastfsize_${aggK}_k_${aggQuantileWindSize}_windsize_${aggAIFOSampleCount}_samprate.vec
eventlog-file = results/${numSpines}_spines_${numAggs}_aggs_${numServers}_servers_${numReqPerBurst}_reqPerBurst_${bgInterArrivalMultiplier}_bgintermult_${burstyInterArrivalMultiplier}_burstyintermult_${repetition}_rep_${incastFlowSize}_incastfsize_${aggK}_k_${aggQuantileWindSize}_windsize_${aggAIFOSampleCount}_samprate.elog
snapshot-file = results/${numSpines}_spines_${numAggs}_aggs_${numServers}_servers_${numReqPerBurst}_reqPerBurst_${bgInterArrivalMultiplier}_bgintermult_${burstyInterArrivalMultiplier}_burstyintermult_${repetition}_rep_${incastFlowSize}_incastfsize_${aggK}_k_${aggQuantileWindSize}_windsize_${aggAIFOSampleCount}_samprate.sna

##############################################################

**.server[*].numApps = ${server0NumApps = 1 + $numMiceBackgroundFlowAppsInEachServer + $numBurstyApps}
# (index() < 1 + $numMiceBackgroundFlowAppsInEachServer) ? Mice flow : Bursty
**.server[*].app[1..].is_bursty = ${server0IsBursty = index() < 1 + $numMiceBackgroundFlowAppsInEachServer ? false : true}
**.server[*].app[0].typename = "DCTcpGenericServerApp"
**.server[*].app[0].localPort = 80
**.server[*].app[1..].typename = "MultiSocketBasicClient"
**.server[*].app[1..].is_mice_background = ${serverIsMiceBackground = index() < 1 + $numMiceBackgroundFlowAppsInEachServer ? true : false}



################################## NEW SETTING ######################################################



[Config DCTCP_QUANTILE_PD_DALPHA]

############ REQUIRES POTENTIAL CHANGE #######################
network = LeafSpine

**.ipv4.ip.timeToLive = ${ttl = 250}
**.tcp.close_instead_of_timewait = ${closeInsteadOfWait = true}
**.tcp.FRs_disabled = ${FRsDisabled = false}
**.useECMP = ${usingECMP = false}
**.use_power_of_n_lb = ${usingPowerOfNLB = true}
**.agg[*].random_power_factor = ${aggRandomPowerFactor = 2}
**.spine[*].random_power_factor = ${spineRandomPowerFactor = $aggRandomPowerFactor}
**.tcp.tcpAlgorithmClass = "DCTcp"
**.tcp.ecnWillingness = ${ecnWill = true}

repeat = 1
sim-time-limit = ${simTimeLimit = 1.2}s





###############################V2 setting###################
**.ipv4.ip.should_use_v2_marking = ${shouldUseV2Marking = true}
**.ipv4.ip.marking_type = ${markingType = "SRPT"}
#**.ipv4.ip.packet_hash_table_size = 3
#**.ipv4.ip.flow_hash_table_size = 1
**.ipv4.ip.delta = ${markingTimer = 0.00036}s

**.ipv4.ip.has_ordering_layer = ${hasOrderingLayer = true}
**.ipv4.ip.omega = ${orderingTimer = 0.00036}s
###############################V2 setting###################


**.num_spines = ${numSpines = 4}
**.num_aggs = ${numAggs = 8}
**.num_servers = ${numServers = 40}
**.num_bursty_apps = ${numBurstyApps = 1}
**.server[*].app[1..].num_requests_per_burst = ${numReqPerBurst = 100}
**.num_mice_background_flow_apps_in_each_server = ${numMiceBackgroundFlowAppsInEachServer = 1}
**.num_elephant_background_flow_apps_in_each_server = ${numElephantBackgroundFlowAppsInEachServer = 0}

**.server[*].app[1..].startTime = 0s
**.server[*].app[1..].replyLength = ${incastFlowSize = 40000}B
**.server[*].app[1..].requestLength = 250B
**.server[*].app[1..].application_category = ${serverApplicationCategory = index() < 1 + $numMiceBackgroundFlowAppsInEachServer ? "cache" : "web"}
**.server[*].app[1..].background_inter_arrival_time_multiplier = ${bgInterArrivalMultiplier = 0.2428}
**.server[*].app[1..].background_flow_size_multiplier = ${bgFlowSizeMultiplier = 1}
**.server[*].app[1..].bursty_inter_arrival_time_multiplier = ${burstyInterArrivalMultiplier = 0.125,  0.0243, 0.0135}
**.server[*].app[1..].bursty_flow_size_multiplier = ${burstyFlowSizeMultiplier = 1}
**.server[*].app[1..].numRequestsToSend = 1
**.server[*].app[1..].distibutions_base_root = "./"


**.agg[*].eth[*].mac.queue.typename = ${aggQueueType = "V2PIFOCanaryQueue"}
**.agg[*].eth[*].mac.queue.dataCapacity = ${aggQueueSizePacketBytes = 300000}B
#**.agg[*].use_v2_pifo = ${aggUseV2Pifo = true}
#**.eth[*].mac.queue.dataCapacity = ${aggBufferSizePacketBytes = $aggPerQueueSizePacketBytes*$aggQueueNum}B
**.agg[*].use_vertigo_prio_queue = ${aggUseVertigoPrioQueue = true}
**.agg[*].v2pifo_queue_type = ${aggV2pifoQueueType = "canary"}
**.agg[*].eth[*].mac.queue.dctcp_thresh = ${aggQueueSizeDCTCPThresh = 65}
**.agg[*].eth[*].mac.queue.algorithm_type = ${aggAlgorithmType = "DETERMINISTIC"}
**.agg[*].eth[*].mac.queue.relative_priority_calculation_type = ${aggRelativePriorityCalculationType = "PERCENTILE"}
**.agg[*].eth[*].mac.queue.relative_priority_distribution_type = ${aggRelativePriorityDistributionType = "EXPONENTIAL"}
**.agg[*].eth[*].mac.queue.minth = ${aggMinTh = 75000}
**.agg[*].eth[*].mac.queue.k = ${aggK = 0, 0.1, 0.2, 0.3, 0.5, 0.7, 0.9, 0.99, 1}
**.agg[*].eth[*].mac.queue.quantile_wind_size = ${aggQuantileWindSize = 20}
**.agg[*].eth[*].mac.queue.aifo_sample_count = ${aggAIFOSampleCount = 20}

**.spine[*].eth[*].mac.queue.typename = ${spineQueueType = $aggQueueType}
**.spine[*].eth[*].mac.queue.dataCapacity = ${spineQueueSizePacketBytes = $aggQueueSizePacketBytes}B
#**.spine[*].use_v2_pifo = ${spineUseV2Pifo = $aggUseV2Pifo}
#**.spine[*].eth[*].mac.queue.dataCapacity = ${spineBufferSizePacketBytes = $aggBufferSizePacketBytes}B
**.spine[*].use_vertigo_prio_queue = ${spineUseVertigoPrioQueue = $aggUseVertigoPrioQueue}
**.spine[*].v2pifo_queue_type = ${spineV2pifoQueueType = $aggV2pifoQueueType}
**.spine[*].eth[*].mac.queue.dctcp_thresh = ${spineQueueSizeDCTCPThresh = $aggQueueSizeDCTCPThresh}
**.spine[*].eth[*].mac.queue.algorithm_type = ${spineAlgorithmType = $aggAlgorithmType}
**.spine[*].eth[*].mac.queue.relative_priority_calculation_type = ${spineRelativePriorityCalculationType = $aggRelativePriorityCalculationType}
**.spine[*].eth[*].mac.queue.relative_priority_distribution_type = ${spineRelativePriorityDistributionType = $aggRelativePriorityDistributionType}
**.spine[*].eth[*].mac.queue.minth = ${spineMinTh = $aggMinTh}
**.spine[*].eth[*].mac.queue.k = ${spineK = $aggK}
**.spine[*].eth[*].mac.queue.quantile_wind_size = ${spineQuantileWindSize = $aggQuantileWindSize}
**.spine[*].eth[*].mac.queue.aifo_sample_count = ${spineAIFOSampleCount = $aggAIFOSampleCount}


**.agg[*].use_memory = ${aggUseMemory = true}
**.agg[*].random_power_memory_size = ${aggPowerMemSize = 1}
**.agg[*].random_power_bounce_memory_size = ${aggPowerBounceMemSize = 1}
**.spine[*].use_memory = ${spineUseMemory = $aggUseMemory}
**.spine[*].random_power_memory_size = ${spinePowerMemSize = $aggPowerMemSize}
**.spine[*].random_power_bounce_memory_size = ${spinePowerBounceMemSize = $aggPowerBounceMemSize}


**.agg[*].eth[*].mac.typename = ${aggMacTypeName = "AugmentedEtherMac"}
**.spine[*].eth[*].mac.typename = ${spineMacTypeName = $aggMacTypeName}
**.agg[*].relayUnit.typename = ${aggRelayTypeName = "BouncingIeee8021dRelay"}
**.spine[*].relayUnit.typename = ${spineRelayTypeName = $aggRelayTypeName}

**.server[*].app[1..].use_jitter = ${server0UseJitter = false}

**.agg[*].bounce_randomly = ${aggBounceRandomly = false}
**.spine[*].bounce_randomly = ${spineBounceRandomly = $aggBounceRandomly}

**.agg[*].bounce_on_same_path = ${aggBounceOnSamePath = false}
**.spine[*].bounce_on_same_path = ${spineBounceOnSamePath = $aggBounceOnSamePath}
**.server[*].forwarding = ${serverForwarding = $aggBounceOnSamePath}

**.agg[*].bounce_randomly_v2 = ${aggBounceRandomlyPowerOfN = true}
**.spine[*].bounce_randomly_v2 = ${spineBounceRandomlyPowerOfN = $aggBounceRandomlyPowerOfN}
**.agg[*].random_power_bounce_factor = ${aggBounceRandomlyPowerFactor = 2}
**.spine[*].random_power_bounce_factor = ${spineBounceRandomlyPowerFactor = $aggBounceRandomlyPowerFactor}

**.agg[*].denominator_for_retrasnmissions = ${aggDenomRet = 2}
**.spine[*].denominator_for_retrasnmissions = ${spineDenomRet = $aggDenomRet}

**.arp.typename = "GlobalArp"
**.agg[*].learn_mac_addresses = false
**.spine[*].learn_mac_addresses = false
**.agg[*].macTable.addressTableFile ="./MAC_Table_Data/agg[" + string(parentIndex()) + "].txt"
**.spine[*].macTable.addressTableFile ="./MAC_Table_Data/spine[" + string(parentIndex()) + "].txt"

cmdenv-output-file = results/${numSpines}_spines_${numAggs}_aggs_${numServers}_servers_${numReqPerBurst}_reqPerBurst_${bgInterArrivalMultiplier}_bgintermult_${burstyInterArrivalMultiplier}_burstyintermult_${repetition}_rep_${incastFlowSize}_incastfsize_${aggK}_k_${aggQuantileWindSize}_windsize_${aggAIFOSampleCount}_samprate.out
output-scalar-file = results/${numSpines}_spines_${numAggs}_aggs_${numServers}_servers_${numReqPerBurst}_reqPerBurst_${bgInterArrivalMultiplier}_bgintermult_${burstyInterArrivalMultiplier}_burstyintermult_${repetition}_rep_${incastFlowSize}_incastfsize_${aggK}_k_${aggQuantileWindSize}_windsize_${aggAIFOSampleCount}_samprate.sca
output-vector-file = results/${numSpines}_spines_${numAggs}_aggs_${numServers}_servers_${numReqPerBurst}_reqPerBurst_${bgInterArrivalMultiplier}_bgintermult_${burstyInterArrivalMultiplier}_burstyintermult_${repetition}_rep_${incastFlowSize}_incastfsize_${aggK}_k_${aggQuantileWindSize}_windsize_${aggAIFOSampleCount}_samprate.vec
eventlog-file = results/${numSpines}_spines_${numAggs}_aggs_${numServers}_servers_${numReqPerBurst}_reqPerBurst_${bgInterArrivalMultiplier}_bgintermult_${burstyInterArrivalMultiplier}_burstyintermult_${repetition}_rep_${incastFlowSize}_incastfsize_${aggK}_k_${aggQuantileWindSize}_windsize_${aggAIFOSampleCount}_samprate.elog
snapshot-file = results/${numSpines}_spines_${numAggs}_aggs_${numServers}_servers_${numReqPerBurst}_reqPerBurst_${bgInterArrivalMultiplier}_bgintermult_${burstyInterArrivalMultiplier}_burstyintermult_${repetition}_rep_${incastFlowSize}_incastfsize_${aggK}_k_${aggQuantileWindSize}_windsize_${aggAIFOSampleCount}_samprate.sna

##############################################################

**.server[*].numApps = ${server0NumApps = 1 + $numMiceBackgroundFlowAppsInEachServer + $numBurstyApps}
# (index() < 1 + $numMiceBackgroundFlowAppsInEachServer) ? Mice flow : Bursty
**.server[*].app[1..].is_bursty = ${server0IsBursty = index() < 1 + $numMiceBackgroundFlowAppsInEachServer ? false : true}
**.server[*].app[0].typename = "DCTcpGenericServerApp"
**.server[*].app[0].localPort = 80
**.server[*].app[1..].typename = "MultiSocketBasicClient"
**.server[*].app[1..].is_mice_background = ${serverIsMiceBackground = index() < 1 + $numMiceBackgroundFlowAppsInEachServer ? true : false}



################################## NEW SETTING ######################################################



[Config DCTCP_QUANTILE_PD_DWIND]

############ REQUIRES POTENTIAL CHANGE #######################
network = LeafSpine

**.ipv4.ip.timeToLive = ${ttl = 250}
**.tcp.close_instead_of_timewait = ${closeInsteadOfWait = true}
**.tcp.FRs_disabled = ${FRsDisabled = false}
**.useECMP = ${usingECMP = false}
**.use_power_of_n_lb = ${usingPowerOfNLB = true}
**.agg[*].random_power_factor = ${aggRandomPowerFactor = 2}
**.spine[*].random_power_factor = ${spineRandomPowerFactor = $aggRandomPowerFactor}
**.tcp.tcpAlgorithmClass = "DCTcp"
**.tcp.ecnWillingness = ${ecnWill = true}

repeat = 1
sim-time-limit = ${simTimeLimit = 1.2}s





###############################V2 setting###################
**.ipv4.ip.should_use_v2_marking = ${shouldUseV2Marking = true}
**.ipv4.ip.marking_type = ${markingType = "SRPT"}
#**.ipv4.ip.packet_hash_table_size = 3
#**.ipv4.ip.flow_hash_table_size = 1
**.ipv4.ip.delta = ${markingTimer = 0.00036}s

**.ipv4.ip.has_ordering_layer = ${hasOrderingLayer = true}
**.ipv4.ip.omega = ${orderingTimer = 0.00036}s
###############################V2 setting###################


**.num_spines = ${numSpines = 4}
**.num_aggs = ${numAggs = 8}
**.num_servers = ${numServers = 40}
**.num_bursty_apps = ${numBurstyApps = 1}
**.server[*].app[1..].num_requests_per_burst = ${numReqPerBurst = 100}
**.num_mice_background_flow_apps_in_each_server = ${numMiceBackgroundFlowAppsInEachServer = 1}
**.num_elephant_background_flow_apps_in_each_server = ${numElephantBackgroundFlowAppsInEachServer = 0}

**.server[*].app[1..].startTime = 0s
**.server[*].app[1..].replyLength = ${incastFlowSize = 40000}B
**.server[*].app[1..].requestLength = 250B
**.server[*].app[1..].application_category = ${serverApplicationCategory = index() < 1 + $numMiceBackgroundFlowAppsInEachServer ? "cache" : "web"}
**.server[*].app[1..].background_inter_arrival_time_multiplier = ${bgInterArrivalMultiplier = 0.2428}
**.server[*].app[1..].background_flow_size_multiplier = ${bgFlowSizeMultiplier = 1}
**.server[*].app[1..].bursty_inter_arrival_time_multiplier = ${burstyInterArrivalMultiplier = 0.125,  0.0243, 0.0135}
**.server[*].app[1..].bursty_flow_size_multiplier = ${burstyFlowSizeMultiplier = 1}
**.server[*].app[1..].numRequestsToSend = 1
**.server[*].app[1..].distibutions_base_root = "./"


**.agg[*].eth[*].mac.queue.typename = ${aggQueueType = "V2PIFOCanaryQueue"}
**.agg[*].eth[*].mac.queue.dataCapacity = ${aggQueueSizePacketBytes = 300000}B
#**.agg[*].use_v2_pifo = ${aggUseV2Pifo = true}
#**.eth[*].mac.queue.dataCapacity = ${aggBufferSizePacketBytes = $aggPerQueueSizePacketBytes*$aggQueueNum}B
**.agg[*].use_vertigo_prio_queue = ${aggUseVertigoPrioQueue = true}
**.agg[*].v2pifo_queue_type = ${aggV2pifoQueueType = "canary"}
**.agg[*].eth[*].mac.queue.dctcp_thresh = ${aggQueueSizeDCTCPThresh = 65}
**.agg[*].eth[*].mac.queue.algorithm_type = ${aggAlgorithmType = "DETERMINISTIC"}
**.agg[*].eth[*].mac.queue.relative_priority_calculation_type = ${aggRelativePriorityCalculationType = "PERCENTILE"}
**.agg[*].eth[*].mac.queue.relative_priority_distribution_type = ${aggRelativePriorityDistributionType = "EXPONENTIAL"}
**.agg[*].eth[*].mac.queue.minth = ${aggMinTh = 75000}
**.agg[*].eth[*].mac.queue.k = ${aggK = 0.9}
**.agg[*].eth[*].mac.queue.quantile_wind_size = ${aggQuantileWindSize = 1, 5, 10, 20, 50, 100, 150, 200}
**.agg[*].eth[*].mac.queue.aifo_sample_count = ${aggAIFOSampleCount = 20}

**.spine[*].eth[*].mac.queue.typename = ${spineQueueType = $aggQueueType}
**.spine[*].eth[*].mac.queue.dataCapacity = ${spineQueueSizePacketBytes = $aggQueueSizePacketBytes}B
#**.spine[*].use_v2_pifo = ${spineUseV2Pifo = $aggUseV2Pifo}
#**.spine[*].eth[*].mac.queue.dataCapacity = ${spineBufferSizePacketBytes = $aggBufferSizePacketBytes}B
**.spine[*].use_vertigo_prio_queue = ${spineUseVertigoPrioQueue = $aggUseVertigoPrioQueue}
**.spine[*].v2pifo_queue_type = ${spineV2pifoQueueType = $aggV2pifoQueueType}
**.spine[*].eth[*].mac.queue.dctcp_thresh = ${spineQueueSizeDCTCPThresh = $aggQueueSizeDCTCPThresh}
**.spine[*].eth[*].mac.queue.algorithm_type = ${spineAlgorithmType = $aggAlgorithmType}
**.spine[*].eth[*].mac.queue.relative_priority_calculation_type = ${spineRelativePriorityCalculationType = $aggRelativePriorityCalculationType}
**.spine[*].eth[*].mac.queue.relative_priority_distribution_type = ${spineRelativePriorityDistributionType = $aggRelativePriorityDistributionType}
**.spine[*].eth[*].mac.queue.minth = ${spineMinTh = $aggMinTh}
**.spine[*].eth[*].mac.queue.k = ${spineK = $aggK}
**.spine[*].eth[*].mac.queue.quantile_wind_size = ${spineQuantileWindSize = $aggQuantileWindSize}
**.spine[*].eth[*].mac.queue.aifo_sample_count = ${spineAIFOSampleCount = $aggAIFOSampleCount}


**.agg[*].use_memory = ${aggUseMemory = true}
**.agg[*].random_power_memory_size = ${aggPowerMemSize = 1}
**.agg[*].random_power_bounce_memory_size = ${aggPowerBounceMemSize = 1}
**.spine[*].use_memory = ${spineUseMemory = $aggUseMemory}
**.spine[*].random_power_memory_size = ${spinePowerMemSize = $aggPowerMemSize}
**.spine[*].random_power_bounce_memory_size = ${spinePowerBounceMemSize = $aggPowerBounceMemSize}


**.agg[*].eth[*].mac.typename = ${aggMacTypeName = "AugmentedEtherMac"}
**.spine[*].eth[*].mac.typename = ${spineMacTypeName = $aggMacTypeName}
**.agg[*].relayUnit.typename = ${aggRelayTypeName = "BouncingIeee8021dRelay"}
**.spine[*].relayUnit.typename = ${spineRelayTypeName = $aggRelayTypeName}

**.server[*].app[1..].use_jitter = ${server0UseJitter = false}

**.agg[*].bounce_randomly = ${aggBounceRandomly = false}
**.spine[*].bounce_randomly = ${spineBounceRandomly = $aggBounceRandomly}

**.agg[*].bounce_on_same_path = ${aggBounceOnSamePath = false}
**.spine[*].bounce_on_same_path = ${spineBounceOnSamePath = $aggBounceOnSamePath}
**.server[*].forwarding = ${serverForwarding = $aggBounceOnSamePath}

**.agg[*].bounce_randomly_v2 = ${aggBounceRandomlyPowerOfN = true}
**.spine[*].bounce_randomly_v2 = ${spineBounceRandomlyPowerOfN = $aggBounceRandomlyPowerOfN}
**.agg[*].random_power_bounce_factor = ${aggBounceRandomlyPowerFactor = 2}
**.spine[*].random_power_bounce_factor = ${spineBounceRandomlyPowerFactor = $aggBounceRandomlyPowerFactor}

**.agg[*].denominator_for_retrasnmissions = ${aggDenomRet = 2}
**.spine[*].denominator_for_retrasnmissions = ${spineDenomRet = $aggDenomRet}

**.arp.typename = "GlobalArp"
**.agg[*].learn_mac_addresses = false
**.spine[*].learn_mac_addresses = false
**.agg[*].macTable.addressTableFile ="./MAC_Table_Data/agg[" + string(parentIndex()) + "].txt"
**.spine[*].macTable.addressTableFile ="./MAC_Table_Data/spine[" + string(parentIndex()) + "].txt"

cmdenv-output-file = results/${numSpines}_spines_${numAggs}_aggs_${numServers}_servers_${numReqPerBurst}_reqPerBurst_${bgInterArrivalMultiplier}_bgintermult_${burstyInterArrivalMultiplier}_burstyintermult_${repetition}_rep_${incastFlowSize}_incastfsize_${aggK}_k_${aggQuantileWindSize}_windsize_${aggAIFOSampleCount}_samprate.out
output-scalar-file = results/${numSpines}_spines_${numAggs}_aggs_${numServers}_servers_${numReqPerBurst}_reqPerBurst_${bgInterArrivalMultiplier}_bgintermult_${burstyInterArrivalMultiplier}_burstyintermult_${repetition}_rep_${incastFlowSize}_incastfsize_${aggK}_k_${aggQuantileWindSize}_windsize_${aggAIFOSampleCount}_samprate.sca
output-vector-file = results/${numSpines}_spines_${numAggs}_aggs_${numServers}_servers_${numReqPerBurst}_reqPerBurst_${bgInterArrivalMultiplier}_bgintermult_${burstyInterArrivalMultiplier}_burstyintermult_${repetition}_rep_${incastFlowSize}_incastfsize_${aggK}_k_${aggQuantileWindSize}_windsize_${aggAIFOSampleCount}_samprate.vec
eventlog-file = results/${numSpines}_spines_${numAggs}_aggs_${numServers}_servers_${numReqPerBurst}_reqPerBurst_${bgInterArrivalMultiplier}_bgintermult_${burstyInterArrivalMultiplier}_burstyintermult_${repetition}_rep_${incastFlowSize}_incastfsize_${aggK}_k_${aggQuantileWindSize}_windsize_${aggAIFOSampleCount}_samprate.elog
snapshot-file = results/${numSpines}_spines_${numAggs}_aggs_${numServers}_servers_${numReqPerBurst}_reqPerBurst_${bgInterArrivalMultiplier}_bgintermult_${burstyInterArrivalMultiplier}_burstyintermult_${repetition}_rep_${incastFlowSize}_incastfsize_${aggK}_k_${aggQuantileWindSize}_windsize_${aggAIFOSampleCount}_samprate.sna

##############################################################

**.server[*].numApps = ${server0NumApps = 1 + $numMiceBackgroundFlowAppsInEachServer + $numBurstyApps}
# (index() < 1 + $numMiceBackgroundFlowAppsInEachServer) ? Mice flow : Bursty
**.server[*].app[1..].is_bursty = ${server0IsBursty = index() < 1 + $numMiceBackgroundFlowAppsInEachServer ? false : true}
**.server[*].app[0].typename = "DCTcpGenericServerApp"
**.server[*].app[0].localPort = 80
**.server[*].app[1..].typename = "MultiSocketBasicClient"
**.server[*].app[1..].is_mice_background = ${serverIsMiceBackground = index() < 1 + $numMiceBackgroundFlowAppsInEachServer ? true : false}





################################## NEW SETTING ######################################################



[Config DCTCP_QUANTILE_PD_DSAMP]

############ REQUIRES POTENTIAL CHANGE #######################
network = LeafSpine

**.ipv4.ip.timeToLive = ${ttl = 250}
**.tcp.close_instead_of_timewait = ${closeInsteadOfWait = true}
**.tcp.FRs_disabled = ${FRsDisabled = false}
**.useECMP = ${usingECMP = false}
**.use_power_of_n_lb = ${usingPowerOfNLB = true}
**.agg[*].random_power_factor = ${aggRandomPowerFactor = 2}
**.spine[*].random_power_factor = ${spineRandomPowerFactor = $aggRandomPowerFactor}
**.tcp.tcpAlgorithmClass = "DCTcp"
**.tcp.ecnWillingness = ${ecnWill = true}

repeat = 1
sim-time-limit = ${simTimeLimit = 1.2}s





###############################V2 setting###################
**.ipv4.ip.should_use_v2_marking = ${shouldUseV2Marking = true}
**.ipv4.ip.marking_type = ${markingType = "SRPT"}
#**.ipv4.ip.packet_hash_table_size = 3
#**.ipv4.ip.flow_hash_table_size = 1
**.ipv4.ip.delta = ${markingTimer = 0.00036}s

**.ipv4.ip.has_ordering_layer = ${hasOrderingLayer = true}
**.ipv4.ip.omega = ${orderingTimer = 0.00036}s
###############################V2 setting###################


**.num_spines = ${numSpines = 4}
**.num_aggs = ${numAggs = 8}
**.num_servers = ${numServers = 40}
**.num_bursty_apps = ${numBurstyApps = 1}
**.server[*].app[1..].num_requests_per_burst = ${numReqPerBurst = 100}
**.num_mice_background_flow_apps_in_each_server = ${numMiceBackgroundFlowAppsInEachServer = 1}
**.num_elephant_background_flow_apps_in_each_server = ${numElephantBackgroundFlowAppsInEachServer = 0}

**.server[*].app[1..].startTime = 0s
**.server[*].app[1..].replyLength = ${incastFlowSize = 40000}B
**.server[*].app[1..].requestLength = 250B
**.server[*].app[1..].application_category = ${serverApplicationCategory = index() < 1 + $numMiceBackgroundFlowAppsInEachServer ? "cache" : "web"}
**.server[*].app[1..].background_inter_arrival_time_multiplier = ${bgInterArrivalMultiplier = 0.2428}
**.server[*].app[1..].background_flow_size_multiplier = ${bgFlowSizeMultiplier = 1}
**.server[*].app[1..].bursty_inter_arrival_time_multiplier = ${burstyInterArrivalMultiplier = 0.125,  0.0243, 0.0135}
**.server[*].app[1..].bursty_flow_size_multiplier = ${burstyFlowSizeMultiplier = 1}
**.server[*].app[1..].numRequestsToSend = 1
**.server[*].app[1..].distibutions_base_root = "./"


**.agg[*].eth[*].mac.queue.typename = ${aggQueueType = "V2PIFOCanaryQueue"}
**.agg[*].eth[*].mac.queue.dataCapacity = ${aggQueueSizePacketBytes = 300000}B
#**.agg[*].use_v2_pifo = ${aggUseV2Pifo = true}
#**.eth[*].mac.queue.dataCapacity = ${aggBufferSizePacketBytes = $aggPerQueueSizePacketBytes*$aggQueueNum}B
**.agg[*].use_vertigo_prio_queue = ${aggUseVertigoPrioQueue = true}
**.agg[*].v2pifo_queue_type = ${aggV2pifoQueueType = "canary"}
**.agg[*].eth[*].mac.queue.dctcp_thresh = ${aggQueueSizeDCTCPThresh = 65}
**.agg[*].eth[*].mac.queue.algorithm_type = ${aggAlgorithmType = "DETERMINISTIC"}
**.agg[*].eth[*].mac.queue.relative_priority_calculation_type = ${aggRelativePriorityCalculationType = "PERCENTILE"}
**.agg[*].eth[*].mac.queue.relative_priority_distribution_type = ${aggRelativePriorityDistributionType = "EXPONENTIAL"}
**.agg[*].eth[*].mac.queue.minth = ${aggMinTh = 75000}
**.agg[*].eth[*].mac.queue.k = ${aggK = 0.9}
**.agg[*].eth[*].mac.queue.quantile_wind_size = ${aggQuantileWindSize = 20}
**.agg[*].eth[*].mac.queue.aifo_sample_count = ${aggAIFOSampleCount = 1, 5, 10, 20, 50, 100, 150, 200, 500}

**.spine[*].eth[*].mac.queue.typename = ${spineQueueType = $aggQueueType}
**.spine[*].eth[*].mac.queue.dataCapacity = ${spineQueueSizePacketBytes = $aggQueueSizePacketBytes}B
#**.spine[*].use_v2_pifo = ${spineUseV2Pifo = $aggUseV2Pifo}
#**.spine[*].eth[*].mac.queue.dataCapacity = ${spineBufferSizePacketBytes = $aggBufferSizePacketBytes}B
**.spine[*].use_vertigo_prio_queue = ${spineUseVertigoPrioQueue = $aggUseVertigoPrioQueue}
**.spine[*].v2pifo_queue_type = ${spineV2pifoQueueType = $aggV2pifoQueueType}
**.spine[*].eth[*].mac.queue.dctcp_thresh = ${spineQueueSizeDCTCPThresh = $aggQueueSizeDCTCPThresh}
**.spine[*].eth[*].mac.queue.algorithm_type = ${spineAlgorithmType = $aggAlgorithmType}
**.spine[*].eth[*].mac.queue.relative_priority_calculation_type = ${spineRelativePriorityCalculationType = $aggRelativePriorityCalculationType}
**.spine[*].eth[*].mac.queue.relative_priority_distribution_type = ${spineRelativePriorityDistributionType = $aggRelativePriorityDistributionType}
**.spine[*].eth[*].mac.queue.minth = ${spineMinTh = $aggMinTh}
**.spine[*].eth[*].mac.queue.k = ${spineK = $aggK}
**.spine[*].eth[*].mac.queue.quantile_wind_size = ${spineQuantileWindSize = $aggQuantileWindSize}
**.spine[*].eth[*].mac.queue.aifo_sample_count = ${spineAIFOSampleCount = $aggAIFOSampleCount}


**.agg[*].use_memory = ${aggUseMemory = true}
**.agg[*].random_power_memory_size = ${aggPowerMemSize = 1}
**.agg[*].random_power_bounce_memory_size = ${aggPowerBounceMemSize = 1}
**.spine[*].use_memory = ${spineUseMemory = $aggUseMemory}
**.spine[*].random_power_memory_size = ${spinePowerMemSize = $aggPowerMemSize}
**.spine[*].random_power_bounce_memory_size = ${spinePowerBounceMemSize = $aggPowerBounceMemSize}


**.agg[*].eth[*].mac.typename = ${aggMacTypeName = "AugmentedEtherMac"}
**.spine[*].eth[*].mac.typename = ${spineMacTypeName = $aggMacTypeName}
**.agg[*].relayUnit.typename = ${aggRelayTypeName = "BouncingIeee8021dRelay"}
**.spine[*].relayUnit.typename = ${spineRelayTypeName = $aggRelayTypeName}

**.server[*].app[1..].use_jitter = ${server0UseJitter = false}

**.agg[*].bounce_randomly = ${aggBounceRandomly = false}
**.spine[*].bounce_randomly = ${spineBounceRandomly = $aggBounceRandomly}

**.agg[*].bounce_on_same_path = ${aggBounceOnSamePath = false}
**.spine[*].bounce_on_same_path = ${spineBounceOnSamePath = $aggBounceOnSamePath}
**.server[*].forwarding = ${serverForwarding = $aggBounceOnSamePath}

**.agg[*].bounce_randomly_v2 = ${aggBounceRandomlyPowerOfN = true}
**.spine[*].bounce_randomly_v2 = ${spineBounceRandomlyPowerOfN = $aggBounceRandomlyPowerOfN}
**.agg[*].random_power_bounce_factor = ${aggBounceRandomlyPowerFactor = 2}
**.spine[*].random_power_bounce_factor = ${spineBounceRandomlyPowerFactor = $aggBounceRandomlyPowerFactor}

**.agg[*].denominator_for_retrasnmissions = ${aggDenomRet = 2}
**.spine[*].denominator_for_retrasnmissions = ${spineDenomRet = $aggDenomRet}

**.arp.typename = "GlobalArp"
**.agg[*].learn_mac_addresses = false
**.spine[*].learn_mac_addresses = false
**.agg[*].macTable.addressTableFile ="./MAC_Table_Data/agg[" + string(parentIndex()) + "].txt"
**.spine[*].macTable.addressTableFile ="./MAC_Table_Data/spine[" + string(parentIndex()) + "].txt"

cmdenv-output-file = results/${numSpines}_spines_${numAggs}_aggs_${numServers}_servers_${numReqPerBurst}_reqPerBurst_${bgInterArrivalMultiplier}_bgintermult_${burstyInterArrivalMultiplier}_burstyintermult_${repetition}_rep_${incastFlowSize}_incastfsize_${aggK}_k_${aggQuantileWindSize}_windsize_${aggAIFOSampleCount}_samprate.out
output-scalar-file = results/${numSpines}_spines_${numAggs}_aggs_${numServers}_servers_${numReqPerBurst}_reqPerBurst_${bgInterArrivalMultiplier}_bgintermult_${burstyInterArrivalMultiplier}_burstyintermult_${repetition}_rep_${incastFlowSize}_incastfsize_${aggK}_k_${aggQuantileWindSize}_windsize_${aggAIFOSampleCount}_samprate.sca
output-vector-file = results/${numSpines}_spines_${numAggs}_aggs_${numServers}_servers_${numReqPerBurst}_reqPerBurst_${bgInterArrivalMultiplier}_bgintermult_${burstyInterArrivalMultiplier}_burstyintermult_${repetition}_rep_${incastFlowSize}_incastfsize_${aggK}_k_${aggQuantileWindSize}_windsize_${aggAIFOSampleCount}_samprate.vec
eventlog-file = results/${numSpines}_spines_${numAggs}_aggs_${numServers}_servers_${numReqPerBurst}_reqPerBurst_${bgInterArrivalMultiplier}_bgintermult_${burstyInterArrivalMultiplier}_burstyintermult_${repetition}_rep_${incastFlowSize}_incastfsize_${aggK}_k_${aggQuantileWindSize}_windsize_${aggAIFOSampleCount}_samprate.elog
snapshot-file = results/${numSpines}_spines_${numAggs}_aggs_${numServers}_servers_${numReqPerBurst}_reqPerBurst_${bgInterArrivalMultiplier}_bgintermult_${burstyInterArrivalMultiplier}_burstyintermult_${repetition}_rep_${incastFlowSize}_incastfsize_${aggK}_k_${aggQuantileWindSize}_windsize_${aggAIFOSampleCount}_samprate.sna

##############################################################

**.server[*].numApps = ${server0NumApps = 1 + $numMiceBackgroundFlowAppsInEachServer + $numBurstyApps}
# (index() < 1 + $numMiceBackgroundFlowAppsInEachServer) ? Mice flow : Bursty
**.server[*].app[1..].is_bursty = ${server0IsBursty = index() < 1 + $numMiceBackgroundFlowAppsInEachServer ? false : true}
**.server[*].app[0].typename = "DCTcpGenericServerApp"
**.server[*].app[0].localPort = 80
**.server[*].app[1..].typename = "MultiSocketBasicClient"
**.server[*].app[1..].is_mice_background = ${serverIsMiceBackground = index() < 1 + $numMiceBackgroundFlowAppsInEachServer ? true : false}






[General]

record-eventlog = false
check-signals = false
cmdenv-redirect-output = true

**.tcp.typename = "Tcp"
**.tcp.useCustomIW = true
**.tcp.customIWMult = 10


**.app[*].dataTransferMode = "object"
**.tcp.delayedAcksEnabled = false
**.tcp.increasedIWEnabled = false
**.tcp.limitedTransmitEnabled = false
**.tcp.mss = 1452
**.tcp.nagleEnabled = true
**.tcp.recordStats = true
**.tcp.sackSupport = false
**.tcp.tcpAlgorithmClass = default
**.tcp.timestampSupport = true
**.tcp.windowScalingSupport = false

# maximum axvertisedwindow
**.tcp.advertisedWindow = 65535

cmdenv-redirect-output = true

**.server[*].app[*].localAddress = ""
**.server[*].app[*].replyDelay = normal(20us, 3us)

**.server[*].tcp.tcpConnectionFINRcv.statistic-recording = true
**.server[*].tcp.tcpConnectionSYNSent.statistic-recording = true
**.server[*].tcp.tcpConnectionSYNSentIsBursty.statistic-recording = true
**.server[*].app[*].requestSentRequesterID.statistic-recording = true
**.server[*].app[*].flowStartedRequesterID.statistic-recording = true
**.server[*].app[*].flowEndedRequesterID.statistic-recording = true
**.server[*].app[*].flowEndQueryID.statistic-recording = true
**.server[*].app[*].replyLengthAsked.statistic-recording = true

#**.server[*].tcp.*.rcvOooSeg.statistic-recording = true
#**.server[*].tcp.*.rtoTime.statistic-recording = true
##**.server[*].tcp.*.dupAcks.statistic-recording = true
##**.server[*].tcp.*.customDupAcksAfterFR.statistic-recording = true
##**.server[*].tcp.*.customFastRecovery.statistic-recording = true
##**.server[*].tcp.*.customFastRetransmit.statistic-recording = true
#**.server[*].ipv4.ip.packetDropForwardingDisabled.statistic-recording = true
**.server[*].tcp.*.rtt.statistic-recording = ${serverRTT = $repetition == 0}
##**.server[*].tcp.*.rto.statistic-recording = ${serverRTO = $repetition == 0}
##**.server[*].tcp.*.cwnd.statistic-recording = ${serverCwnd = $repetition == 0}
#
#**.server[*].app[*].bytesRequestedFromServer.statistic-recording = ${serverReqedBytes = $repetition == 0}
**.server[*].app[*].chunksRcvdLength.statistic-recording = ${serverRcvdLen = $repetition == 0}
**.server[*].app[*].chunksRcvdTotalLength.statistic-recording = ${serverTotalRcvdLen = $repetition == 0}
**.server[*].eth[*].mac.packetHopCount.statistic-recording = ${serverHopCount = $repetition == 0}
##**.server[*].eth[*].**.queueingTimeIncast.statistic-recording = ${serverQTimeIncast = $repetition == 0}
##**.server[*].eth[*].**.queueingTime.statistic-recording = ${serverQTime = $repetition == 0}
##**.server[*].eth[*].**.DCQueueLength.statistic-recording = ${serverQLength = $repetition == 0}
##**.server[*].eth[*].**.DCQueueLengthPacketBytes.statistic-recording = ${serverQLengthPacketBytes = $repetition == 0}
#
#**.agg[*].eth[*].**.packetDropQueueOverflow.statistic-recording = true
#**.agg[*].eth[*].**.packetDropped.statistic-recording = true
#**.agg[*].eth[*].**.packetDroppedReceiverName.statistic-recording = ${aggPacketDropRcvName = $repetition == 0}
#**.agg[*].eth[*].**.packetDroppedSenderName.statistic-recording = ${aggPacketDropSndName = $repetition == 0}
#**.agg[*].eth[*].**.packetDroppedIsBursty.statistic-recording = ${aggPacketDropBursty = $repetition == 0}
#**.agg[*].eth[*].**.queueingTime.statistic-recording = ${aggQTime = $repetition == 0}
##**.agg[*].eth[*].**.queueingTimeFlowSize.statistic-recording = ${aggQTimeFlowSize = $repetition == 0}
#**.agg[*].eth[*].**.queueingTimeIncast.statistic-recording = ${aggQTimeIncast = $repetition == 0}
#**.agg[*].eth[*].**.DCQueueLength.statistic-recording = ${aggQLength = $repetition == 0}
#**.agg[*].eth[*].**.DCQueueLengthPacketBytes.statistic-recording = ${aggQLengthPacketBytes = $repetition == 0}
#
#**.spine[*].eth[*].**.packetDropQueueOverflow.statistic-recording = true
#**.spine[*].eth[*].**.packetDropped.statistic-recording = true
#**.spine[*].eth[*].**.packetDroppedReceiverName.statistic-recording = ${spinePacketDropRcvName = $repetition == 0}
#**.spine[*].eth[*].**.packetDroppedSenderName.statistic-recording = ${spinePacketDropSndName = $repetition == 0}
#**.spine[*].eth[*].**.packetDroppedIsBursty.statistic-recording = ${spinePacketDropBursty = $repetition == 0}
#**.spine[*].eth[*].**.queueingTime.statistic-recording = ${spineQTime = $repetition == 0}
##**.spine[*].eth[*].**.queueingTimeFlowSize.statistic-recording = ${spineQTimeFlowSize = $repetition == 0}
#**.spine[*].eth[*].**.queueingTimeIncast.statistic-recording = ${spineQTimeIncast = $repetition == 0}
#**.spine[*].eth[*].**.DCQueueLength.statistic-recording = ${spineQLength = $repetition == 0}
#**.spine[*].eth[*].**.DCQueueLengthPacketBytes.statistic-recording = ${spineQLengthPacketBytes = $repetition == 0}
#
#**.**.eth[*].mac.FBPacketDropped.statistic-recording = true
#**.**.eth[*].mac.FBPacketGenerated.statistic-recording = true
#**.**.eth[*].mac.FBPacketGeneratedReqID.statistic-recording = true
#**.**.eth[*].mac.FBBouncePassed.statistic-recording = true
#
#**.eth[*].**.droppktSeqs.statistic-recording = ${dropPacketSeqs = $repetition == 0}
#**.eth[*].**.droppktRetCount.statistic-recording = ${dropPacketRetCount = $repetition == 0}
#**.eth[*].**.pktDropTotalPayloadLen.statistic-recording = ${bgDropPacketPayloadTotalLen = $repetition == 0}
#
#
#**.**.relayUnit.FBPacketDropped.statistic-recording = true
#**.**.relayUnit.FBPacketDroppedPort.statistic-recording = true
#**.**.relayUnit.FBPacketGenerated.statistic-recording = true
#**.**.relayUnit.FBBouncePassed.statistic-recording = true
#**.**.relayUnit.BurstyPacketReceived.statistic-recording = true
#
**.ipv4.ip.v2QTime.statistic-recording = true

#**.server[*].tcp.*.sndWnd.statistic-recording = ${serverSndWnd = $repetition == 0}
#**.server[*].tcp.*.rcvAdv.statistic-recording = ${serverRcvAdv = $repetition == 0}
#**.server[*].tcp.*.rcvWnd.statistic-recording = ${serverRcvWnd = $repetition == 0}

#**.server[0..4].tcp.*.sndNxt.statistic-recording = true

#**.perPortQueueLengthByte.statistic-recording = true
#**.sharedMemQueueLengthByte.statistic-recording = true

**.statistic-recording = false
#**.vector-recording = false
#**.scalar-recording = false


